{
    "openapi": "3.0.0",
    "info": {
        "title": "Sistema de Reservas de Restaurantes",
        "description": "API para la gesti√≥n de clientes, mesas y reservas.",
        "contact": {
            "name": "Vladimir Faundez",
            "email": "v.faundezh@gmail.com"
        },
        "license": {
            "name": "Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International",
            "url": "https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Servidor principal de la API"
        }
    ],
    "paths": {
        "/api/v1/customers": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Get all customers",
                "description": "Retrieve a list of all customers.",
                "operationId": "getAllCustomers",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/CustomerSuccess"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "description": "Store a new customer in the system.",
                "operationId": "storeCustomer",
                "requestBody": {
                    "$ref": "#/components/requestBodies/StoreCustomerRequest"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/CustomerSuccessId"
                    },
                    "400": {
                        "$ref": "#/components/responses/CustomerInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/{customer}": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Get a customer by ID",
                "description": "Retrieve a specific customer by their ID.",
                "operationId": "getCustomerById",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "ID of the customer to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/CustomerSuccessId"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Customers"
                ],
                "summary": "Update a customer",
                "description": "Update an existing customer in the system.",
                "operationId": "updateCustomer",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "ID of the customer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/UpdateCustomerRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/CustomerSuccessId"
                    },
                    "400": {
                        "$ref": "#/components/responses/CustomerInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer",
                "description": "Remove a specific customer from the system.",
                "operationId": "deleteCustomer",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "ID of the customer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer deleted successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/reservations": {
            "get": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Get all reservation",
                "description": "Retrieve a list of all reservations.",
                "operationId": "getAllReservations",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ReservationSuccess"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Create a new reservation",
                "description": "Store a new reservation in the system.",
                "operationId": "storeReservation",
                "requestBody": {
                    "$ref": "#/components/requestBodies/StoreReservationRequest"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/ReservationSuccess"
                    },
                    "400": {
                        "$ref": "#/components/responses/ReservationInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/reservations/{reservation}": {
            "get": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Get a reservation by ID",
                "description": "Retrieve a specific reservation by its ID.",
                "operationId": "getReservationById",
                "parameters": [
                    {
                        "name": "reservation",
                        "in": "path",
                        "description": "ID of the reservation to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ReservationSuccessId"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Update a reservation",
                "description": "Update an existing reservation in the system.",
                "operationId": "updateReservation",
                "parameters": [
                    {
                        "name": "reservation",
                        "in": "path",
                        "description": "ID of the reservation to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/UpdateReservationRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ReservationSuccessId"
                    },
                    "400": {
                        "$ref": "#/components/responses/ReservationInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Delete a reservation",
                "description": "Delete a specific reservation by its ID.",
                "operationId": "deleteReservation",
                "parameters": [
                    {
                        "name": "reservation",
                        "in": "path",
                        "description": "ID of the reservation to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Reservation deleted successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/reservations/{reservation}/completed": {
            "patch": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Complete a reservation",
                "description": "Mark a specific reservation as completed.",
                "operationId": "completeReservation",
                "parameters": [
                    {
                        "name": "reservation",
                        "in": "path",
                        "description": "ID of the reservation to complete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reservation completed successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/reservations/{reservation}/cancelled": {
            "patch": {
                "tags": [
                    "Reservations"
                ],
                "summary": "Cancel a reservation",
                "description": "Mark a specific reservation as cancelled.",
                "operationId": "cancelReservation",
                "parameters": [
                    {
                        "name": "reservation",
                        "in": "path",
                        "description": "ID of the reservation to cancel",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reservation cancelled successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tables": {
            "get": {
                "tags": [
                    "Tables"
                ],
                "summary": "Get all tables",
                "description": "Retrieve a list of all tables.",
                "operationId": "getAllTable",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TableSuccess"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tables"
                ],
                "summary": "Create a new table",
                "description": "Create a new table.",
                "operationId": "createTable",
                "requestBody": {
                    "$ref": "#/components/requestBodies/StoreTableRequest"
                },
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/TableSuccessId"
                    },
                    "400": {
                        "$ref": "#/components/responses/TableInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tables/{table}": {
            "get": {
                "tags": [
                    "Tables"
                ],
                "summary": "Get a table by ID",
                "description": "Retrieve a table by its ID.",
                "operationId": "getTableById",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "ID of the table to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TableSuccessId"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tables"
                ],
                "summary": "Update a table",
                "description": "Update a table by its ID.",
                "operationId": "updateTable",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "ID of the table to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/UpdateTableRequest"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TableSuccessId"
                    },
                    "400": {
                        "$ref": "#/components/responses/TableInvalidRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tables"
                ],
                "summary": "Delete a table",
                "description": "Delete a table by its ID.",
                "operationId": "deleteTable",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "ID of the table to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Table deleted successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tables/availables": {
            "get": {
                "tags": [
                    "Tables"
                ],
                "summary": "Get available tables",
                "description": "Retrieve a list of available tables.",
                "operationId": "getAvailableTables",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TableSuccess"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tables/{table}/release": {
            "patch": {
                "tags": [
                    "Tables"
                ],
                "summary": "Release a table",
                "description": "Release a table by its ID.",
                "operationId": "releaseTable",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "ID of the table to release",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Table released successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tables/{table}/occupied": {
            "patch": {
                "tags": [
                    "Tables"
                ],
                "summary": "Occupied a table",
                "description": "Occupied a table by its ID.",
                "operationId": "occupiedTable",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "ID of the table to occupied",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Table occupied successfully"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthenticatedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Customer": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@mail.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+56912345678"
                    },
                    "registration_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "Reservation": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "reservation_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-01-01"
                    },
                    "reservation_time": {
                        "type": "string",
                        "format": "time",
                        "example": "12:00"
                    },
                    "number_of_people": {
                        "type": "integer",
                        "example": 4
                    },
                    "status": {
                        "type": "string",
                        "example": "confirmed"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Family dinner"
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": 3
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "Table": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "is_available": {
                        "type": "boolean",
                        "example": true
                    },
                    "capacity": {
                        "type": "integer",
                        "example": 4
                    },
                    "location": {
                        "type": "string",
                        "example": "indoor"
                    }
                },
                "type": "object"
            },
            "SuccessResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Operation successful"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Operation failed"
                    },
                    "data": {
                        "type": "string",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UnauthenticatedResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Unauthenticated"
                    },
                    "data": {
                        "type": "string",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "NotFoundResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Resource not found"
                    },
                    "data": {
                        "type": "string",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UnauthorizedResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Unauthorized"
                    },
                    "data": {
                        "type": "string",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "InvalidRequestResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Invalid request"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "example": "email"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "The email field is required."
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "ServerErrorResponse": {
                "required": [
                    "status",
                    "message",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Server error"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Internal server error"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "CustomerSuccess": {
                "description": "Successful customer operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Customer"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "CustomerSuccessId": {
                "description": "Successful customer operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "CustomerInvalidRequest": {
                "description": "Invalid request data",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Invalid request"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "field": {
                                                "type": "string",
                                                "example": "email"
                                            },
                                            "message": {
                                                "type": "string",
                                                "example": "The email field is required."
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "NotFoundError": {
                "description": "Reservation not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/NotFoundResponse"
                        }
                    }
                }
            },
            "UnauthenticatedError": {
                "description": "Unauthenticated user",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/UnauthenticatedResponse"
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Unauthorized action",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/UnauthorizedResponse"
                        }
                    }
                }
            },
            "ServerError": {
                "description": "Internal server error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ServerErrorResponse"
                        }
                    }
                }
            },
            "ReservationSuccess": {
                "description": "Successful reservation operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Reservation"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ReservationSuccessId": {
                "description": "Successful reservation operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "$ref": "#/components/schemas/Reservation"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ReservationInvalidRequest": {
                "description": "Invalid request data",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Invalid request"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "field": {
                                                "type": "string",
                                                "example": "name"
                                            },
                                            "message": {
                                                "type": "string",
                                                "example": "The name field is required."
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "TableSuccess": {
                "description": "Successful table operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Table"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "TableSuccessId": {
                "description": "Successful table operation",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "message": {
                                    "type": "string",
                                    "example": ""
                                },
                                "data": {
                                    "$ref": "#/components/schemas/Table"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "TableInvalidRequest": {
                "description": "Invalid request data",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Invalid request"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "field": {
                                                "type": "string",
                                                "example": "status"
                                            },
                                            "message": {
                                                "type": "string",
                                                "example": "The status field is required."
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "requestBodies": {
            "StoreCustomerRequest": {
                "description": "Data required to create a customer",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "name",
                                "email",
                                "phone"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "John Doe"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email",
                                    "example": "johndoe@example.com"
                                },
                                "phone": {
                                    "type": "string",
                                    "example": "+123456789"
                                },
                                "registrationDate": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2024-01-01T12:00:00Z"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "StoreReservationRequest": {
                "description": "Data required to create a reservation",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "reservation_date",
                                "reservation_time",
                                "number_of_people",
                                "status",
                                "notes",
                                "customer_id",
                                "user_id",
                                "tables"
                            ],
                            "properties": {
                                "reservation_date": {
                                    "type": "string",
                                    "format": "date",
                                    "example": "2024-01-01"
                                },
                                "reservation_time": {
                                    "type": "string",
                                    "format": "time",
                                    "example": "12:00"
                                },
                                "number_of_people": {
                                    "type": "integer",
                                    "example": 4
                                },
                                "status": {
                                    "type": "string",
                                    "example": "confirmed"
                                },
                                "notes": {
                                    "type": "string",
                                    "example": "Family dinner"
                                },
                                "customer_id": {
                                    "type": "integer",
                                    "example": 3
                                },
                                "user_id": {
                                    "type": "integer",
                                    "example": 2
                                },
                                "tables": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "example": [
                                        1,
                                        2
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "StoreTableRequest": {
                "description": "Data required to store a table",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "is_available",
                                "capacity",
                                "location"
                            ],
                            "properties": {
                                "is_available": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "capacity": {
                                    "type": "integer",
                                    "example": 4
                                },
                                "location": {
                                    "type": "string",
                                    "example": "indoor"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UpdateCustomerRequest": {
                "description": "Data to update a customer",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "John Doe"
                                },
                                "email": {
                                    "type": "string",
                                    "format": "email",
                                    "example": "johndoe@example.com"
                                },
                                "phone": {
                                    "type": "string",
                                    "example": "+123456789"
                                },
                                "registrationDate": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2024-01-01T12:00:00Z"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UpdateReservationRequest": {
                "description": "Data required to update a reservation",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "reservation_date",
                                "reservation_time",
                                "number_of_people",
                                "status",
                                "notes",
                                "customer_id",
                                "user_id",
                                "tables"
                            ],
                            "properties": {
                                "reservation_date": {
                                    "type": "string",
                                    "format": "date",
                                    "example": "2024-01-01"
                                },
                                "reservation_time": {
                                    "type": "string",
                                    "format": "time",
                                    "example": "12:00"
                                },
                                "number_of_people": {
                                    "type": "integer",
                                    "example": 4
                                },
                                "status": {
                                    "type": "string",
                                    "example": "confirmed"
                                },
                                "notes": {
                                    "type": "string",
                                    "example": "Family dinner"
                                },
                                "customer_id": {
                                    "type": "integer",
                                    "example": 3
                                },
                                "user_id": {
                                    "type": "integer",
                                    "example": 2
                                },
                                "tables": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "example": [
                                        1,
                                        2
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UpdateTableRequest": {
                "description": "Data required to update a table",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "is_available",
                                "capacity",
                                "location"
                            ],
                            "properties": {
                                "is_available": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "capacity": {
                                    "type": "integer",
                                    "example": 4
                                },
                                "location": {
                                    "type": "string",
                                    "example": "indoor"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "description": "JWT Authorization header usando el esquema Bearer.",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Customers",
            "description": "Customers"
        },
        {
            "name": "Reservations",
            "description": "Reservations"
        },
        {
            "name": "Tables",
            "description": "Tables"
        }
    ]
}